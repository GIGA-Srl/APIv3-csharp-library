/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sib_api_v3_sdk.Client;
using sib_api_v3_sdk.Api;
using sib_api_v3_sdk.Model;

namespace sib_api_v3_sdk.Test
{
    /// <summary>
    ///  Class for testing SMSCampaignsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SMSCampaignsApiTests
    {
        private SMSCampaignsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SMSCampaignsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SMSCampaignsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SMSCampaignsApi
            //Assert.IsInstanceOfType(typeof(SMSCampaignsApi), instance, "instance is a SMSCampaignsApi");
        }

        
        /// <summary>
        /// Test CreateSmsCampaign
        /// </summary>
        [Test]
        public void CreateSmsCampaignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSmsCampaign createSmsCampaign = null;
            //var response = instance.CreateSmsCampaign(createSmsCampaign);
            //Assert.IsInstanceOf<CreateModel> (response, "response is CreateModel");
        }
        
        /// <summary>
        /// Test DeleteSmsCampaign
        /// </summary>
        [Test]
        public void DeleteSmsCampaignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //instance.DeleteSmsCampaign(campaignId);
            
        }
        
        /// <summary>
        /// Test GetSmsCampaign
        /// </summary>
        [Test]
        public void GetSmsCampaignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //var response = instance.GetSmsCampaign(campaignId);
            //Assert.IsInstanceOf<GetSmsCampaign> (response, "response is GetSmsCampaign");
        }
        
        /// <summary>
        /// Test GetSmsCampaigns
        /// </summary>
        [Test]
        public void GetSmsCampaignsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string status = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //long? limit = null;
            //long? offset = null;
            //var response = instance.GetSmsCampaigns(status, startDate, endDate, limit, offset);
            //Assert.IsInstanceOf<GetSmsCampaigns> (response, "response is GetSmsCampaigns");
        }
        
        /// <summary>
        /// Test RequestSmsRecipientExport
        /// </summary>
        [Test]
        public void RequestSmsRecipientExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //RequestSmsRecipientExport recipientExport = null;
            //var response = instance.RequestSmsRecipientExport(campaignId, recipientExport);
            //Assert.IsInstanceOf<CreatedProcessId> (response, "response is CreatedProcessId");
        }
        
        /// <summary>
        /// Test SendSmsCampaignNow
        /// </summary>
        [Test]
        public void SendSmsCampaignNowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //instance.SendSmsCampaignNow(campaignId);
            
        }
        
        /// <summary>
        /// Test SendSmsReport
        /// </summary>
        [Test]
        public void SendSmsReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //SendReport sendReport = null;
            //instance.SendSmsReport(campaignId, sendReport);
            
        }
        
        /// <summary>
        /// Test SendTestSms
        /// </summary>
        [Test]
        public void SendTestSmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //SendTestSms phoneNumber = null;
            //instance.SendTestSms(campaignId, phoneNumber);
            
        }
        
        /// <summary>
        /// Test UpdateSmsCampaign
        /// </summary>
        [Test]
        public void UpdateSmsCampaignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //UpdateSmsCampaign updateSmsCampaign = null;
            //instance.UpdateSmsCampaign(campaignId, updateSmsCampaign);
            
        }
        
        /// <summary>
        /// Test UpdateSmsCampaignStatus
        /// </summary>
        [Test]
        public void UpdateSmsCampaignStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //UpdateCampaignStatus status = null;
            //instance.UpdateSmsCampaignStatus(campaignId, status);
            
        }
        
    }

}
