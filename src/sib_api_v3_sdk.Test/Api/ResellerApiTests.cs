/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sib_api_v3_sdk.Client;
using sib_api_v3_sdk.Api;
using sib_api_v3_sdk.Model;

namespace sib_api_v3_sdk.Test
{
    /// <summary>
    ///  Class for testing ResellerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ResellerApiTests
    {
        private ResellerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ResellerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ResellerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ResellerApi
            //Assert.IsInstanceOfType(typeof(ResellerApi), instance, "instance is a ResellerApi");
        }

        
        /// <summary>
        /// Test AddCredits
        /// </summary>
        [Test]
        public void AddCreditsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string childAuthKey = null;
            //AddCredits addCredits = null;
            //var response = instance.AddCredits(childAuthKey, addCredits);
            //Assert.IsInstanceOf<RemainingCreditModel> (response, "response is RemainingCreditModel");
        }
        
        /// <summary>
        /// Test AssociateIpToChild
        /// </summary>
        [Test]
        public void AssociateIpToChildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string childAuthKey = null;
            //ManageIp ip = null;
            //instance.AssociateIpToChild(childAuthKey, ip);
            
        }
        
        /// <summary>
        /// Test CreateResellerChild
        /// </summary>
        [Test]
        public void CreateResellerChildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateChild resellerChild = null;
            //var response = instance.CreateResellerChild(resellerChild);
            //Assert.IsInstanceOf<CreateReseller> (response, "response is CreateReseller");
        }
        
        /// <summary>
        /// Test DeleteResellerChild
        /// </summary>
        [Test]
        public void DeleteResellerChildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string childAuthKey = null;
            //instance.DeleteResellerChild(childAuthKey);
            
        }
        
        /// <summary>
        /// Test DissociateIpFromChild
        /// </summary>
        [Test]
        public void DissociateIpFromChildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string childAuthKey = null;
            //ManageIp ip = null;
            //instance.DissociateIpFromChild(childAuthKey, ip);
            
        }
        
        /// <summary>
        /// Test GetChildInfo
        /// </summary>
        [Test]
        public void GetChildInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string childAuthKey = null;
            //var response = instance.GetChildInfo(childAuthKey);
            //Assert.IsInstanceOf<GetChildInfo> (response, "response is GetChildInfo");
        }
        
        /// <summary>
        /// Test GetResellerChilds
        /// </summary>
        [Test]
        public void GetResellerChildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetResellerChilds();
            //Assert.IsInstanceOf<GetChildrenList> (response, "response is GetChildrenList");
        }
        
        /// <summary>
        /// Test RemoveCredits
        /// </summary>
        [Test]
        public void RemoveCreditsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string childAuthKey = null;
            //RemoveCredits removeCredits = null;
            //var response = instance.RemoveCredits(childAuthKey, removeCredits);
            //Assert.IsInstanceOf<RemainingCreditModel> (response, "response is RemainingCreditModel");
        }
        
        /// <summary>
        /// Test UpdateResellerChild
        /// </summary>
        [Test]
        public void UpdateResellerChildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string childAuthKey = null;
            //UpdateChild resellerChild = null;
            //instance.UpdateResellerChild(childAuthKey, resellerChild);
            
        }
        
    }

}
