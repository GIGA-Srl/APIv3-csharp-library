/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = sib_api_v3_sdk.Client.SwaggerDateConverter;

namespace sib_api_v3_sdk.Model
{
    /// <summary>
    /// File data that is uploaded
    /// </summary>
    [DataContract]
    public partial class FileData :  IEquatable<FileData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileData" /> class.
        /// </summary>
        /// <param name="url">Url of uploaded file.</param>
        /// <param name="id">Id of uploaded file.</param>
        /// <param name="name">Name of uploaded file.</param>
        /// <param name="authorId">Account id of user which created the file.</param>
        /// <param name="author">Account details of user which created the file.</param>
        /// <param name="contactId">Contact id of contact on which file is uploaded.</param>
        /// <param name="dealIds">Deal ids linked to a file.</param>
        /// <param name="size">Size of file uploaded.</param>
        /// <param name="createdAt">File created date/time.</param>
        /// <param name="updatedAt">File updated date/time.</param>
        public FileData(string url = default(string), string id = default(string), string name = default(string), string authorId = default(string), Object author = default(Object), long? contactId = default(long?), List<string> dealIds = default(List<string>), long? size = default(long?), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?))
        {
            this.Url = url;
            this.Id = id;
            this.Name = name;
            this.AuthorId = authorId;
            this.Author = author;
            this.ContactId = contactId;
            this.DealIds = dealIds;
            this.Size = size;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Url of uploaded file
        /// </summary>
        /// <value>Url of uploaded file</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Id of uploaded file
        /// </summary>
        /// <value>Id of uploaded file</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of uploaded file
        /// </summary>
        /// <value>Name of uploaded file</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Account id of user which created the file
        /// </summary>
        /// <value>Account id of user which created the file</value>
        [DataMember(Name="authorId", EmitDefaultValue=false)]
        public string AuthorId { get; set; }

        /// <summary>
        /// Account details of user which created the file
        /// </summary>
        /// <value>Account details of user which created the file</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public Object Author { get; set; }

        /// <summary>
        /// Contact id of contact on which file is uploaded
        /// </summary>
        /// <value>Contact id of contact on which file is uploaded</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public long? ContactId { get; set; }

        /// <summary>
        /// Deal ids linked to a file
        /// </summary>
        /// <value>Deal ids linked to a file</value>
        [DataMember(Name="dealIds", EmitDefaultValue=false)]
        public List<string> DealIds { get; set; }

        /// <summary>
        /// Size of file uploaded
        /// </summary>
        /// <value>Size of file uploaded</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// File created date/time
        /// </summary>
        /// <value>File created date/time</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// File updated date/time
        /// </summary>
        /// <value>File updated date/time</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileData {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  DealIds: ").Append(DealIds).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileData);
        }

        /// <summary>
        /// Returns true if FileData instances are equal
        /// </summary>
        /// <param name="input">Instance of FileData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AuthorId == input.AuthorId ||
                    (this.AuthorId != null &&
                    this.AuthorId.Equals(input.AuthorId))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.DealIds == input.DealIds ||
                    this.DealIds != null &&
                    this.DealIds.SequenceEqual(input.DealIds)
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AuthorId != null)
                    hashCode = hashCode * 59 + this.AuthorId.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.DealIds != null)
                    hashCode = hashCode * 59 + this.DealIds.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
