/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = sib_api_v3_sdk.Client.SwaggerDateConverter;

namespace sib_api_v3_sdk.Model
{
    /// <summary>
    /// Contact Details
    /// </summary>
    [DataContract]
    public partial class Contact :  IEquatable<Contact>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Contact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="virtualNextTask">Next incomplete task of contact.</param>
        /// <param name="email">Contact email (required).</param>
        /// <param name="assignToId">User id to whom contact is assigned.</param>
        /// <param name="contactsId">Contact id.</param>
        /// <param name="crmLists">CRM lists in which contact is added (required).</param>
        /// <param name="attributes">Contact attributes e.g firstname / lastname / SMS etc..</param>
        /// <param name="createdAt">Contact created date/time.</param>
        /// <param name="updatedAt">Contact updated date/time.</param>
        public Contact(Object virtualNextTask = default(Object), string email = default(string), string assignToId = default(string), int? contactsId = default(int?), Object crmLists = default(Object), Object attributes = default(Object), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for Contact and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "crmLists" is required (not null)
            if (crmLists == null)
            {
                throw new InvalidDataException("crmLists is a required property for Contact and cannot be null");
            }
            else
            {
                this.CrmLists = crmLists;
            }
            this.VirtualNextTask = virtualNextTask;
            this.AssignToId = assignToId;
            this.ContactsId = contactsId;
            this.Attributes = attributes;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Next incomplete task of contact
        /// </summary>
        /// <value>Next incomplete task of contact</value>
        [DataMember(Name="virtualNextTask", EmitDefaultValue=false)]
        public Object VirtualNextTask { get; set; }

        /// <summary>
        /// Contact email
        /// </summary>
        /// <value>Contact email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// User id to whom contact is assigned
        /// </summary>
        /// <value>User id to whom contact is assigned</value>
        [DataMember(Name="assignToId", EmitDefaultValue=false)]
        public string AssignToId { get; set; }

        /// <summary>
        /// Contact id
        /// </summary>
        /// <value>Contact id</value>
        [DataMember(Name="contactsId", EmitDefaultValue=false)]
        public int? ContactsId { get; set; }

        /// <summary>
        /// CRM lists in which contact is added
        /// </summary>
        /// <value>CRM lists in which contact is added</value>
        [DataMember(Name="crmLists", EmitDefaultValue=false)]
        public Object CrmLists { get; set; }

        /// <summary>
        /// Contact attributes e.g firstname / lastname / SMS etc.
        /// </summary>
        /// <value>Contact attributes e.g firstname / lastname / SMS etc.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// Contact created date/time
        /// </summary>
        /// <value>Contact created date/time</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Contact updated date/time
        /// </summary>
        /// <value>Contact updated date/time</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  VirtualNextTask: ").Append(VirtualNextTask).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  AssignToId: ").Append(AssignToId).Append("\n");
            sb.Append("  ContactsId: ").Append(ContactsId).Append("\n");
            sb.Append("  CrmLists: ").Append(CrmLists).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Contact);
        }

        /// <summary>
        /// Returns true if Contact instances are equal
        /// </summary>
        /// <param name="input">Instance of Contact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VirtualNextTask == input.VirtualNextTask ||
                    (this.VirtualNextTask != null &&
                    this.VirtualNextTask.Equals(input.VirtualNextTask))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.AssignToId == input.AssignToId ||
                    (this.AssignToId != null &&
                    this.AssignToId.Equals(input.AssignToId))
                ) && 
                (
                    this.ContactsId == input.ContactsId ||
                    (this.ContactsId != null &&
                    this.ContactsId.Equals(input.ContactsId))
                ) && 
                (
                    this.CrmLists == input.CrmLists ||
                    (this.CrmLists != null &&
                    this.CrmLists.Equals(input.CrmLists))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VirtualNextTask != null)
                    hashCode = hashCode * 59 + this.VirtualNextTask.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.AssignToId != null)
                    hashCode = hashCode * 59 + this.AssignToId.GetHashCode();
                if (this.ContactsId != null)
                    hashCode = hashCode * 59 + this.ContactsId.GetHashCode();
                if (this.CrmLists != null)
                    hashCode = hashCode * 59 + this.CrmLists.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
