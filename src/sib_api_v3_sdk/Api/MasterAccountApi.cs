/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using sib_api_v3_sdk.Client;
using sib_api_v3_sdk.Model;

namespace sib_api_v3_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMasterAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the details of requested master account
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details of the master account.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MasterDetailsResponse</returns>
        MasterDetailsResponse CorporateMasterAccountGet ();

        /// <summary>
        /// Get the details of requested master account
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details of the master account.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MasterDetailsResponse</returns>
        ApiResponse<MasterDetailsResponse> CorporateMasterAccountGetWithHttpInfo ();
        /// <summary>
        /// Get the list of all the sub-accounts of the master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list all the sub-accounts of the master account.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>SubAccountsResponse</returns>
        SubAccountsResponse CorporateSubAccountGet (int? offset, int? limit);

        /// <summary>
        /// Get the list of all the sub-accounts of the master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list all the sub-accounts of the master account.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>ApiResponse of SubAccountsResponse</returns>
        ApiResponse<SubAccountsResponse> CorporateSubAccountGetWithHttpInfo (int? offset, int? limit);
        /// <summary>
        /// Delete a sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns></returns>
        void CorporateSubAccountIdDelete (long? id);

        /// <summary>
        /// Delete a sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateSubAccountIdDeleteWithHttpInfo (long? id);
        /// <summary>
        /// Get sub-account details
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details for the specified sub-account company
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>SubAccountDetailsResponse</returns>
        SubAccountDetailsResponse CorporateSubAccountIdGet (long? id);

        /// <summary>
        /// Get sub-account details
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details for the specified sub-account company
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>ApiResponse of SubAccountDetailsResponse</returns>
        ApiResponse<SubAccountDetailsResponse> CorporateSubAccountIdGetWithHttpInfo (long? id);
        /// <summary>
        /// Update sub-account plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update the sub-account plan
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns></returns>
        void CorporateSubAccountIdPlanPut (long? id, SubAccountUpdatePlanRequest updatePlanDetails);

        /// <summary>
        /// Update sub-account plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update the sub-account plan
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateSubAccountIdPlanPutWithHttpInfo (long? id, SubAccountUpdatePlanRequest updatePlanDetails);
        /// <summary>
        /// Create an API key for a sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an API v3 key for a sub account
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>CreateApiKeyResponse</returns>
        CreateApiKeyResponse CorporateSubAccountKeyPost (CreateApiKeyRequest createApiKeyRequest);

        /// <summary>
        /// Create an API key for a sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an API v3 key for a sub account
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>ApiResponse of CreateApiKeyResponse</returns>
        ApiResponse<CreateApiKeyResponse> CorporateSubAccountKeyPostWithHttpInfo (CreateApiKeyRequest createApiKeyRequest);
        /// <summary>
        /// Create a new sub-account under a master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will create a new sub-account under a master account
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>CreateSubAccountResponse</returns>
        CreateSubAccountResponse CorporateSubAccountPost (CreateSubAccount subAccountCreate);

        /// <summary>
        /// Create a new sub-account under a master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will create a new sub-account under a master account
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>ApiResponse of CreateSubAccountResponse</returns>
        ApiResponse<CreateSubAccountResponse> CorporateSubAccountPostWithHttpInfo (CreateSubAccount subAccountCreate);
        /// <summary>
        /// Generate SSO token to access Sendinblue
        /// </summary>
        /// <remarks>
        /// This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>GetSsoToken</returns>
        GetSsoToken CorporateSubAccountSsoTokenPost (SsoTokenRequest ssoTokenRequest);

        /// <summary>
        /// Generate SSO token to access Sendinblue
        /// </summary>
        /// <remarks>
        /// This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        ApiResponse<GetSsoToken> CorporateSubAccountSsoTokenPostWithHttpInfo (SsoTokenRequest ssoTokenRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the details of requested master account
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details of the master account.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MasterDetailsResponse</returns>
        System.Threading.Tasks.Task<MasterDetailsResponse> CorporateMasterAccountGetAsync ();

        /// <summary>
        /// Get the details of requested master account
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details of the master account.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MasterDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MasterDetailsResponse>> CorporateMasterAccountGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get the list of all the sub-accounts of the master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list all the sub-accounts of the master account.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of SubAccountsResponse</returns>
        System.Threading.Tasks.Task<SubAccountsResponse> CorporateSubAccountGetAsync (int? offset, int? limit);

        /// <summary>
        /// Get the list of all the sub-accounts of the master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list all the sub-accounts of the master account.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of ApiResponse (SubAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubAccountsResponse>> CorporateSubAccountGetAsyncWithHttpInfo (int? offset, int? limit);
        /// <summary>
        /// Delete a sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateSubAccountIdDeleteAsync (long? id);

        /// <summary>
        /// Delete a sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdDeleteAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get sub-account details
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details for the specified sub-account company
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of SubAccountDetailsResponse</returns>
        System.Threading.Tasks.Task<SubAccountDetailsResponse> CorporateSubAccountIdGetAsync (long? id);

        /// <summary>
        /// Get sub-account details
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details for the specified sub-account company
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of ApiResponse (SubAccountDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubAccountDetailsResponse>> CorporateSubAccountIdGetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update sub-account plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update the sub-account plan
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateSubAccountIdPlanPutAsync (long? id, SubAccountUpdatePlanRequest updatePlanDetails);

        /// <summary>
        /// Update sub-account plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update the sub-account plan
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdPlanPutAsyncWithHttpInfo (long? id, SubAccountUpdatePlanRequest updatePlanDetails);
        /// <summary>
        /// Create an API key for a sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an API v3 key for a sub account
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of CreateApiKeyResponse</returns>
        System.Threading.Tasks.Task<CreateApiKeyResponse> CorporateSubAccountKeyPostAsync (CreateApiKeyRequest createApiKeyRequest);

        /// <summary>
        /// Create an API key for a sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an API v3 key for a sub account
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of ApiResponse (CreateApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateApiKeyResponse>> CorporateSubAccountKeyPostAsyncWithHttpInfo (CreateApiKeyRequest createApiKeyRequest);
        /// <summary>
        /// Create a new sub-account under a master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will create a new sub-account under a master account
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of CreateSubAccountResponse</returns>
        System.Threading.Tasks.Task<CreateSubAccountResponse> CorporateSubAccountPostAsync (CreateSubAccount subAccountCreate);

        /// <summary>
        /// Create a new sub-account under a master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will create a new sub-account under a master account
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of ApiResponse (CreateSubAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubAccountResponse>> CorporateSubAccountPostAsyncWithHttpInfo (CreateSubAccount subAccountCreate);
        /// <summary>
        /// Generate SSO token to access Sendinblue
        /// </summary>
        /// <remarks>
        /// This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of GetSsoToken</returns>
        System.Threading.Tasks.Task<GetSsoToken> CorporateSubAccountSsoTokenPostAsync (SsoTokenRequest ssoTokenRequest);

        /// <summary>
        /// Generate SSO token to access Sendinblue
        /// </summary>
        /// <remarks>
        /// This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> CorporateSubAccountSsoTokenPostAsyncWithHttpInfo (SsoTokenRequest ssoTokenRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MasterAccountApi : IMasterAccountApi
    {
        private sib_api_v3_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MasterAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MasterAccountApi(String basePath)
        {
            this.Configuration = new sib_api_v3_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sib_api_v3_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MasterAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MasterAccountApi(sib_api_v3_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sib_api_v3_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sib_api_v3_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sib_api_v3_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sib_api_v3_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MasterDetailsResponse</returns>
        public MasterDetailsResponse CorporateMasterAccountGet ()
        {
             ApiResponse<MasterDetailsResponse> localVarResponse = CorporateMasterAccountGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MasterDetailsResponse</returns>
        public ApiResponse< MasterDetailsResponse > CorporateMasterAccountGetWithHttpInfo ()
        {

            var localVarPath = "./corporate/masterAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateMasterAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasterDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MasterDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasterDetailsResponse)));
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MasterDetailsResponse</returns>
        public async System.Threading.Tasks.Task<MasterDetailsResponse> CorporateMasterAccountGetAsync ()
        {
             ApiResponse<MasterDetailsResponse> localVarResponse = await CorporateMasterAccountGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MasterDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MasterDetailsResponse>> CorporateMasterAccountGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./corporate/masterAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateMasterAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasterDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MasterDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasterDetailsResponse)));
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>SubAccountsResponse</returns>
        public SubAccountsResponse CorporateSubAccountGet (int? offset, int? limit)
        {
             ApiResponse<SubAccountsResponse> localVarResponse = CorporateSubAccountGetWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>ApiResponse of SubAccountsResponse</returns>
        public ApiResponse< SubAccountsResponse > CorporateSubAccountGetWithHttpInfo (int? offset, int? limit)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MasterAccountApi->CorporateSubAccountGet");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling MasterAccountApi->CorporateSubAccountGet");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountsResponse)));
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of SubAccountsResponse</returns>
        public async System.Threading.Tasks.Task<SubAccountsResponse> CorporateSubAccountGetAsync (int? offset, int? limit)
        {
             ApiResponse<SubAccountsResponse> localVarResponse = await CorporateSubAccountGetAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of ApiResponse (SubAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubAccountsResponse>> CorporateSubAccountGetAsyncWithHttpInfo (int? offset, int? limit)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MasterAccountApi->CorporateSubAccountGet");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling MasterAccountApi->CorporateSubAccountGet");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountsResponse)));
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns></returns>
        public void CorporateSubAccountIdDelete (long? id)
        {
             CorporateSubAccountIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIdDeleteWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdDelete");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIdDeleteAsync (long? id)
        {
             await CorporateSubAccountIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdDeleteAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdDelete");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>SubAccountDetailsResponse</returns>
        public SubAccountDetailsResponse CorporateSubAccountIdGet (long? id)
        {
             ApiResponse<SubAccountDetailsResponse> localVarResponse = CorporateSubAccountIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>ApiResponse of SubAccountDetailsResponse</returns>
        public ApiResponse< SubAccountDetailsResponse > CorporateSubAccountIdGetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdGet");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountDetailsResponse)));
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of SubAccountDetailsResponse</returns>
        public async System.Threading.Tasks.Task<SubAccountDetailsResponse> CorporateSubAccountIdGetAsync (long? id)
        {
             ApiResponse<SubAccountDetailsResponse> localVarResponse = await CorporateSubAccountIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of ApiResponse (SubAccountDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubAccountDetailsResponse>> CorporateSubAccountIdGetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdGet");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountDetailsResponse)));
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns></returns>
        public void CorporateSubAccountIdPlanPut (long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
             CorporateSubAccountIdPlanPutWithHttpInfo(id, updatePlanDetails);
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIdPlanPutWithHttpInfo (long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");
            // verify the required parameter 'updatePlanDetails' is set
            if (updatePlanDetails == null)
                throw new ApiException(400, "Missing required parameter 'updatePlanDetails' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");

            var localVarPath = "./corporate/subAccount/{id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updatePlanDetails != null && updatePlanDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlanDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanDetails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdPlanPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIdPlanPutAsync (long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
             await CorporateSubAccountIdPlanPutAsyncWithHttpInfo(id, updatePlanDetails);

        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdPlanPutAsyncWithHttpInfo (long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");
            // verify the required parameter 'updatePlanDetails' is set
            if (updatePlanDetails == null)
                throw new ApiException(400, "Missing required parameter 'updatePlanDetails' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");

            var localVarPath = "./corporate/subAccount/{id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updatePlanDetails != null && updatePlanDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlanDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanDetails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdPlanPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>CreateApiKeyResponse</returns>
        public CreateApiKeyResponse CorporateSubAccountKeyPost (CreateApiKeyRequest createApiKeyRequest)
        {
             ApiResponse<CreateApiKeyResponse> localVarResponse = CorporateSubAccountKeyPostWithHttpInfo(createApiKeyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>ApiResponse of CreateApiKeyResponse</returns>
        public ApiResponse< CreateApiKeyResponse > CorporateSubAccountKeyPostWithHttpInfo (CreateApiKeyRequest createApiKeyRequest)
        {
            // verify the required parameter 'createApiKeyRequest' is set
            if (createApiKeyRequest == null)
                throw new ApiException(400, "Missing required parameter 'createApiKeyRequest' when calling MasterAccountApi->CorporateSubAccountKeyPost");

            var localVarPath = "./corporate/subAccount/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createApiKeyRequest != null && createApiKeyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createApiKeyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createApiKeyRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountKeyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateApiKeyResponse)));
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of CreateApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<CreateApiKeyResponse> CorporateSubAccountKeyPostAsync (CreateApiKeyRequest createApiKeyRequest)
        {
             ApiResponse<CreateApiKeyResponse> localVarResponse = await CorporateSubAccountKeyPostAsyncWithHttpInfo(createApiKeyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of ApiResponse (CreateApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateApiKeyResponse>> CorporateSubAccountKeyPostAsyncWithHttpInfo (CreateApiKeyRequest createApiKeyRequest)
        {
            // verify the required parameter 'createApiKeyRequest' is set
            if (createApiKeyRequest == null)
                throw new ApiException(400, "Missing required parameter 'createApiKeyRequest' when calling MasterAccountApi->CorporateSubAccountKeyPost");

            var localVarPath = "./corporate/subAccount/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createApiKeyRequest != null && createApiKeyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createApiKeyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createApiKeyRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountKeyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateApiKeyResponse)));
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>CreateSubAccountResponse</returns>
        public CreateSubAccountResponse CorporateSubAccountPost (CreateSubAccount subAccountCreate)
        {
             ApiResponse<CreateSubAccountResponse> localVarResponse = CorporateSubAccountPostWithHttpInfo(subAccountCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>ApiResponse of CreateSubAccountResponse</returns>
        public ApiResponse< CreateSubAccountResponse > CorporateSubAccountPostWithHttpInfo (CreateSubAccount subAccountCreate)
        {
            // verify the required parameter 'subAccountCreate' is set
            if (subAccountCreate == null)
                throw new ApiException(400, "Missing required parameter 'subAccountCreate' when calling MasterAccountApi->CorporateSubAccountPost");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountCreate != null && subAccountCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subAccountCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subAccountCreate; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSubAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubAccountResponse)));
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of CreateSubAccountResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubAccountResponse> CorporateSubAccountPostAsync (CreateSubAccount subAccountCreate)
        {
             ApiResponse<CreateSubAccountResponse> localVarResponse = await CorporateSubAccountPostAsyncWithHttpInfo(subAccountCreate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of ApiResponse (CreateSubAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSubAccountResponse>> CorporateSubAccountPostAsyncWithHttpInfo (CreateSubAccount subAccountCreate)
        {
            // verify the required parameter 'subAccountCreate' is set
            if (subAccountCreate == null)
                throw new ApiException(400, "Missing required parameter 'subAccountCreate' when calling MasterAccountApi->CorporateSubAccountPost");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountCreate != null && subAccountCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subAccountCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subAccountCreate; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSubAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubAccountResponse)));
        }

        /// <summary>
        /// Generate SSO token to access Sendinblue This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>GetSsoToken</returns>
        public GetSsoToken CorporateSubAccountSsoTokenPost (SsoTokenRequest ssoTokenRequest)
        {
             ApiResponse<GetSsoToken> localVarResponse = CorporateSubAccountSsoTokenPostWithHttpInfo(ssoTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate SSO token to access Sendinblue This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        public ApiResponse< GetSsoToken > CorporateSubAccountSsoTokenPostWithHttpInfo (SsoTokenRequest ssoTokenRequest)
        {
            // verify the required parameter 'ssoTokenRequest' is set
            if (ssoTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'ssoTokenRequest' when calling MasterAccountApi->CorporateSubAccountSsoTokenPost");

            var localVarPath = "./corporate/subAccount/ssoToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssoTokenRequest != null && ssoTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssoTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssoTokenRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountSsoTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Generate SSO token to access Sendinblue This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of GetSsoToken</returns>
        public async System.Threading.Tasks.Task<GetSsoToken> CorporateSubAccountSsoTokenPostAsync (SsoTokenRequest ssoTokenRequest)
        {
             ApiResponse<GetSsoToken> localVarResponse = await CorporateSubAccountSsoTokenPostAsyncWithHttpInfo(ssoTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate SSO token to access Sendinblue This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> CorporateSubAccountSsoTokenPostAsyncWithHttpInfo (SsoTokenRequest ssoTokenRequest)
        {
            // verify the required parameter 'ssoTokenRequest' is set
            if (ssoTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'ssoTokenRequest' when calling MasterAccountApi->CorporateSubAccountSsoTokenPost");

            var localVarPath = "./corporate/subAccount/ssoToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssoTokenRequest != null && ssoTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssoTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssoTokenRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountSsoTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

    }
}
